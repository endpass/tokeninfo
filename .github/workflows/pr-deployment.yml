name: pull-request-review-deployment

on:
  pull_request:
    types: [labeled]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'deploy'
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      
    - name: create deployment
      id: create_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        environment: review
        auto_merge: false
        transient_environment: true
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: set deployment status to in progress
      id: start_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: review
        environment_url: https://${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: in_progress
        mediaType: '{"previews": ["flash", "ant-man"]}'
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

#
# Start of build and deployment logic
#
    
    - name: get commit short SHA
      id: short_sha_tag
      run: echo ::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: review/tokeninfo
        IMAGE_TAG: ${{ steps.short_sha_tag.outputs.sha_short }}
      run: |
        docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image-hash::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Deploy
      uses: gridwave/helm-deployer@master
      with:
        release: tokeninfo
        namespace: review
        chart: ./charts/tokeninfo
        version: ${{ github.sha }}
        value-files: ./charts/tokeninfo/values.yaml
        values: |
          deployment.image.repository: ${{ steps.login-ecr.outputs.registry }}/review/tokeninfo
          deployment.image.tag: ${{ steps.vars.outputs.sha_short }}
          ingressroute.host: ${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
      env:
        KUBECONFIG_FILE: "${{ secrets.KUBECONFIG }}"

    - name: Create DNS record
      id: create_dns_record
      env:
        RESOURCE_RECORD_NAME: ${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        RESOURCE_RECORD_VALUE: ${{ secrets.RESOURCE_RECORD_VALUE }}
      run: |
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTEDZONE_ID }} \
        --change-batch '{ "Comment": "Testing creating a record set", "Changes": [ { "Action": "CREATE", "ResourceRecordSet": { "Name": "'"$RESOURCE_RECORD_NAME"'", "Type": "CNAME", "TTL": 120, "ResourceRecords": [ { "Value": "'"$RESOURCE_RECORD_VALUE"'" } ] } } ] }'
        

#
# End of build and deployment logic
#

    - name: Set deployment status to success
      id: successful_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: review
        environment_url: https://${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: success
        mediaType: '{"previews": ["ant-man"]}'
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: Set deployment status to failure
      id: failed_deployment
      uses: octokit/request-action@v2.x
      if: failure()
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: review
        environment_url: https://${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: failure
        mediaType: '{"previews": ["ant-man"]}'
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
