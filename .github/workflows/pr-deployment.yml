name: pull-request-review-deployment

on:
  pull_request:
    types: [labeled]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'deploy'
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install multiwerf
      run: |
        # add ~/bin into path
        export PATH=$PATH:$HOME/bin
        echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
        # install multiwerf into ~/bin directory
        mkdir -p ~/bin
        cd ~/bin
        curl -L https://raw.githubusercontent.com/flant/multiwerf/master/get.sh | bash
        echo "::add-path::$HOME/bin"

    - name: Create kubeconfig
      run: |
        KUBECONFIG=$(mktemp -d)/config
        echo $BASE64_KUBECONFIG | base64 -d -w0 > $KUBECONFIG
        echo ::set-env name=KUBECONFIG::$KUBECONFIG
      env:
        BASE64_KUBECONFIG: ${{ secrets.BASE64_KUBECONFIG }}
      
    - name: Create deployment
      id: create_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments
        repository: ${{ github.repository }}
        ref: ${{ github.ref }}
        environment: review
        auto_merge: false
        transient_environment: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set deployment status to in progress
      id: start_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: review
        environment_url: https://${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: in_progress
        mediaType: '{"previews": ["flash", "ant-man"]}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        WERF_STAGES_STORAGE: ${{ steps.login-ecr.outputs.registry }}/stages/tokeninfo
        WERF_IMAGES_REPO: ${{ steps.login-ecr.outputs.registry }}/review/tokeninfo
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        . $(multiwerf use 1.1 stable --as-file)
        werf build-and-publish --tag-git-branch $(werf slugify --format docker-tag ${{ github.head_ref }}) 

    - name: Deploy to k8s
      id: deploy-to-k8s
      env:
        WERF_STAGES_STORAGE: ${{ steps.login-ecr.outputs.registry }}/stages/tokeninfo
        WERF_IMAGES_REPO: ${{ steps.login-ecr.outputs.registry }}/review/tokeninfo
        WERF_HELM_RELEASE_STORAGE_NAMESPACE: werf-releases
        WERF_HELM_RELEASE_STORAGE_TYPE: secret
      run: |
        . $(multiwerf use 1.1 stable --as-file)
        werf deploy --release tokeninfo-review-${{ github.event.pull_request.number }} --namespace review --env review --tag-git-branch $(werf slugify --format docker-tag ${{ github.head_ref }}) \
        --values .helm/values-dev.yaml --set ingress.host=${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        
    - name: Create DNS record
      id: create_dns_record
      env:
        RESOURCE_RECORD_NAME: ${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        RESOURCE_RECORD_VALUE: ${{ secrets.RESOURCE_RECORD_VALUE }}
      run: |
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTEDZONE_ID }} \
        --change-batch '{ "Comment": "Testing creating a record set", "Changes": [ { "Action": "CREATE", "ResourceRecordSet": { "Name": "'"$RESOURCE_RECORD_NAME"'", "Type": "CNAME", "TTL": 120, "ResourceRecords": [ { "Value": "'"$RESOURCE_RECORD_VALUE"'" } ] } } ] }'
        
    - name: Set deployment status to success
      id: successful_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: review
        environment_url: https://${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: success
        mediaType: '{"previews": ["ant-man"]}'
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: Set deployment status to failure
      id: failed_deployment
      uses: octokit/request-action@v2.x
      if: failure()
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: review
        environment_url: https://${{ github.event.pull_request.number }}-tokeninfo.review.endpass.com
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: failure
        mediaType: '{"previews": ["ant-man"]}'
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
